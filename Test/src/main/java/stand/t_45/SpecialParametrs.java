package stand.t_45;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
import java.util.Arrays;
import java.util.List;
/**
 * --------------------- \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432<br>
 * <i>native declaration : line 78</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SpecialParametrs extends Structure<SpecialParametrs, SpecialParametrs.ByValue, SpecialParametrs.ByReference > {
	/** \u0422\u0438\u043f \u0444\u0438\u043b\u044c\u0442\u0440\u0430 */
	public int FilterType;
	/**
	 * \u041f\u043e\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0438\u0437\u043c. \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b<br>
	 * C type : float[6]
	 */
	public float[] Popravka = new float[6];
	/** \u041f\u0435\u0440\u0438\u043e\u0434 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u043e\u0442\u044b \u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f */
	public int SpeedMeasurementPeriod;
	/** \u041a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0443\u0441\u0440\u0435\u0434\u043d\u0435\u043d\u0438\u044f */
	public short AveragingFactor;
	/** \u0415\u0441\u0442\u044c \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0434\u0430\u0442\u0447\u0438\u043a \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 */
	public byte VneshnDatchSkor;
	/** \u0420\u0435\u0436\u0438\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u0430 */
	public byte ServerMode;
	/** \u0421\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u0440\u0442\u0430 */
	public int OwnServerBasePortNumber;
	/**
	 * \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b COM-\u043f\u043e\u0440\u0442\u0430<br>
	 * C type : _ParamComPort*
	 */
	public stand.t_45.ParamComPort.ByReference PParamComPort;
	/**
	 * \u0410\u0434\u0440\u0435\u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430<br>
	 * C type : char*
	 */
	public Pointer ServerAddress;
	/** \u041d\u043e\u043c\u0435\u0440 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u0440\u0442\u0430 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430 */
	public int AnotherServerBasePortNumber;
	/**
	 * \u041d\u043e\u043c\u0435\u0440 \u043a\u0430\u043d\u0430\u043b\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430<br>
	 * C type : UCHAR
	 */
	public byte ServerChannelNumber;
	/**
	 * \u041d\u043e\u043c\u0435\u0440 COM-\u043f\u043e\u0440\u0442\u0430<br>
	 * C type : UCHAR
	 */
	public byte ComPortNumber;
	/**
	 * \u041d\u043e\u043c\u0435\u0440 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0432 \u0441\u0435\u0442\u0438 MODBUS<br>
	 * C type : UCHAR
	 */
	public byte MODBUS_DeviceAddress;
	public SpecialParametrs() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("FilterType", "Popravka", "SpeedMeasurementPeriod", "AveragingFactor", "VneshnDatchSkor", "ServerMode", "OwnServerBasePortNumber", "PParamComPort", "ServerAddress", "AnotherServerBasePortNumber", "ServerChannelNumber", "ComPortNumber", "MODBUS_DeviceAddress");
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected SpecialParametrs newInstance() { return new SpecialParametrs(); }
	public static SpecialParametrs[] newArray(int arrayLength) {
		return Structure.newArray(SpecialParametrs.class, arrayLength);
	}
	public static class ByReference extends SpecialParametrs implements Structure.ByReference {
		
	};
	public static class ByValue extends SpecialParametrs implements Structure.ByValue {
		
	};
}
