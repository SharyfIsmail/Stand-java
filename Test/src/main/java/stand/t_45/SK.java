package stand.t_45;
import com.ochafik.lang.jnaerator.runtime.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * --------------------- \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u043e\u0433\u043e \u043a\u0430\u043d\u0430\u043b\u0430<br>
 * <i>native declaration : line 101</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SK extends Structure<SK, SK.ByValue, SK.ByReference > {
	/** C type : unsigned char[3] */
	public byte[] ID_Datchik = new byte[3];
	/** C type : UCHAR */
	public byte Temperature;
	/** C type : UCHAR */
	public byte Korrect;
	public short K_Zub;
	/** C type : UCHAR */
	public byte MaxSkorVr;
	/** C type : UCHAR[3] */
	public byte[] Date_Poverki = new byte[3];
	/** C type : UCHAR[49] */
	public byte[] Slug_Inf = new byte[49];
	public SK() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("ID_Datchik", "Temperature", "Korrect", "K_Zub", "MaxSkorVr", "Date_Poverki", "Slug_Inf");
	}
	/**
	 * @param ID_Datchik C type : unsigned char[3]<br>
	 * @param Temperature C type : UCHAR<br>
	 * @param Korrect C type : UCHAR<br>
	 * @param MaxSkorVr C type : UCHAR<br>
	 * @param Date_Poverki C type : UCHAR[3]<br>
	 * @param Slug_Inf C type : UCHAR[49]
	 */
	public SK(byte ID_Datchik[], byte Temperature, byte Korrect, short K_Zub, byte MaxSkorVr, byte Date_Poverki[], byte Slug_Inf[]) {
		super();
		if ((ID_Datchik.length != this.ID_Datchik.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.ID_Datchik = ID_Datchik;
		this.Temperature = Temperature;
		this.Korrect = Korrect;
		this.K_Zub = K_Zub;
		this.MaxSkorVr = MaxSkorVr;
		if ((Date_Poverki.length != this.Date_Poverki.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.Date_Poverki = Date_Poverki;
		if ((Slug_Inf.length != this.Slug_Inf.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.Slug_Inf = Slug_Inf;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected SK newInstance() { return new SK(); }
	public static SK[] newArray(int arrayLength) {
		return Structure.newArray(SK.class, arrayLength);
	}
	public static class ByReference extends SK implements Structure.ByReference {
		
	};
	public static class ByValue extends SK implements Structure.ByValue {
		
	};
}
