package stand.t_45;
import com.ochafik.lang.jnaerator.runtime.LibraryExtractor;
import com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.platform.win32.WinDef.ULONGLONG;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.win32.StdCallLibrary.StdCallCallback;

import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
/**
 * JNA Wrapper for library <b>test</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface T_45 extends Library {
	public static final String JNA_LIBRARY_NAME = LibraryExtractor.getLibraryPath("VCDecoder", true, T_45.class);
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(T_45.JNA_LIBRARY_NAME);
	public static final T_45 INSTANCE = (T_45)Native.loadLibrary(T_45.JNA_LIBRARY_NAME, T_45.class);
	public static final int USB_DECODER_M36 = (int)13;
	public static final int RET_CODE_IO_ERROR = (int)3;
	public static final int MESSAGE_ISKAJENIA = (int)8;
	public static final int MESSAGE_BUFFER_LOSS = (int)15;
	public static final int MODBUS_DECODER = (int)1;
	public static final int MESSAGE_SERVER_OFF = (int)29;
	public static final int MODBUS_DECODER_T46 = (int)11;
	public static final int ETHERNET_DECODER_T37 = (int)5;
	public static final int REMOTE_DECODER = (int)3;
	public static final int DATA_TYPE_MESSAGES = (int)103;
	public static final int RET_CODE_NIL = (int)7;
	public static final int MESSAGE_OSHIBKA_IO = (int)9;
	public static final int DATA_TYPE_DISCONNECT = (int)104;
	public static final int MESSAGE_CLIENT_START = (int)27;
	public static final int COMPORT_DECODER_T42 = (int)9;
	public static final int USB_DECODER_T45 = (int)10;
	public static final int DATA_TYPE_SPEED = (int)101;
	public static final int DATA_TYPE_TEMPERATURA = (int)102;
	public static final int MESSAGE_POLUCHEN_ID = (int)2;
	public static final int RET_CODE_DATA_DISTORSION = (int)4;
	public static final int DATA_TYPE_DATA = (int)100;
	public static final int MESSAGE_OSHIBKA_ID = (int)3;
	public static final int MESSAGE_DECODER_OFF = (int)6;
	public static final int MODBUS_DECODER_T36 = (int)7;
	public static final int MESSAGE_EEPROM_ERROR = (int)17;
	public static final int MESSAGE_SERVER_ON = (int)30;
	public static final int RET_CODE_SERVER_IO_ERROR = (int)10;
	public static final int MESSAGE_DATCHIK_OFF = (int)4;
	public static final int USB_DECODER_T35 = (int)6;
	public static final int MESSAGE_CLIENT_STOP = (int)28;
	public static final int COMPORT_DECODER_T32 = (int)8;
	public static final int RET_CODE_SERVER_TIMEOUT = (int)11;
	public static final int RET_CODE_KOMMAND_ERR = (int)101;
	public static final int MESSAGE_DEBUG3 = (int)23;
	public static final int RET_CODE_END_POTOK = (int)44;
	public static final int RET_CODE_TRANSDUCER_OFF = (int)2;
	public static final int MESSAGE_NET_PAUSY = (int)10;
	public static final int MESSAGE_DEBUG2 = (int)22;
	public static final int RET_CODE_PAUSE_NIL = (int)5;
	public static final int MESSAGE_DEBUG1 = (int)21;
	public static final int MESSAGE_DATCHIK_ON = (int)5;
	public static final int RET_CODE_SUCCESS = (int)0;
	public static final int MESSAGE_DECODER_ON = (int)7;
	public static final int RET_CODE_DECODER_OFF = (int)1;
	public static final int MESSAGE_INPUT_TIMEOUT = (int)20;
	public static final int RET_CODE_INPUT_TIMEOUT = (int)8;
	public static final int RET_CODE_NODATA = (int)103;
	public static final int MAX_SENSOR_NUMBER = (int)6;
	public static final int COMPORT_DECODER = (int)2;
	public static final int RET_CODE_NET_INACCESSIBLE = (int)6;
	public static final int MESSAGE_NETWORK_OFF = (int)11;
	public static final int USB_DECODER = (int)0;
	public static final int MESSAGE_MESSAGEQ_OVERFL = (int)19;
	public static final int MESSAGE_EEPROM_WRITE = (int)16;
	public static final int RET_CODE_SERVER_OFF = (int)9;
	public static final int MESSAGE_SBOI_SYNCHRO = (int)1;
	public static final int SIMULATOR_DECODER = (int)4;
	public static final int MESSAGE_ALGORITM_ERROR1 = (int)18;
	public static final int MESSAGE_ALGORITM_ERROR3 = (int)25;
	public static final int ETHERNET_DECODER_T47 = (int)12;
	public static final int MESSAGE_ALGORITM_ERROR2 = (int)24;
	public static final int MESSAGE_VOSST_ERROR2 = (int)26;
	public static final int RET_CODE_CHECKSUM_ERR = (int)102;
	public static final int MESSAGE_VOSST_SYNCHRO = (int)13;
	public interface DATA_HANDLER extends StdCallCallback {
		int apply(int DataType, Pointer Zapis, Pointer PContext);
	};
	public interface DECODER_CREATE extends Callback {
		Pointer apply(int NKan, byte DecoderType, T_45.DATA_HANDLER DataHandler, Pointer PContext, SpecialParametrs PSpecialParametrs);
	};
	public interface DECODER_OPEN extends Callback {
		int apply(Pointer PDecoder, byte DataStream);
	};
	public interface DECODER_READ_TRANSDUCER_PARAM extends Callback {
		int apply(Pointer PDecoder, SK PTranducerParametrs, Pointer StrokaDatchikID);
	};
	public interface DECODER_SET_CURRENT_TIME extends Callback {
		int apply(Pointer PDecoder, long DecoderCurrentTime);
	};
	public interface DECODER_GET_CURRENT_TIME extends Callback {
		int apply(Pointer PDecoder, LongByReference PDecoderCurrentTime);
	};
	public interface DECODER_SET_PARAMETRS extends Callback {
		int apply(Pointer PDecoder, short AveragingFactor, int SpeedMeasurementPeriod, FloatByReference Popravka);
	};
	public interface DECODER_GET_MESSAGE extends Callback {
		int apply(Pointer PDecoder, Pointer PBuffer, IntByReference PrealSize);
	};
	public interface DECODER_READ_BASE extends Callback {
		int apply(Pointer PDecoder, Pointer OtvetServera, IntByReference PBytesRead);
	};
	public interface DECODER_READ_SPEED extends Callback {
		int apply(Pointer PDecoder, Pointer OtvetServera, IntByReference PBytesRead);
	};
	public interface DECODER_READ_TEMPERATURE extends Callback {
		int apply(Pointer PDecoder, Pointer OtvetServera, IntByReference PBytesRead);
	};
	public interface DECODER_READ_COMPLEX extends Callback {
		int apply(Pointer PDecoder, Pointer OtvetServera, IntByReference PBytesRead);
	};
	public interface DECODER_CLOSE extends Callback {
		int apply(Pointer PDecoder);
	};
	/**
	 * ------------------------------------------------------------------------------<br>
	 * Original signature : <code>void* GetEntryPointAddress(HMODULE, LPCSTR)</code><br>
	 * <i>native declaration : line 175</i>
	 */
	Pointer GetEntryPointAddress(T_45.HMODULE HM, T_45.LPCSTR EntryPointName);
	/**
	 * Original signature : <code>void* DecoderCreate(int, UCHAR, DATA_HANDLER, void*, _SpecialParametrs*)</code><br>
	 * <i>native declaration : line 184</i>
	 */
	Pointer DecoderCreate(int NKan, byte DecoderType, T_45.DATA_HANDLER DataHandler, Pointer PContext, SpecialParametrs PSpecialParametrs);
	/**
	 * Original signature : <code>int DecoderOpen(void*, bool)</code><br>
	 * <i>native declaration : line 190</i>
	 */
	int DecoderOpen(Pointer PDecoder, byte DataStream);
	/**
	 * Original signature : <code>int DecoderClose(void*)</code><br>
	 * <i>native declaration : line 191</i>
	 */
	int DecoderClose(Pointer PDecoder);
	/**
	 * Original signature : <code>int DecoderGetCurrentTime(void*, UINT64*)</code><br>
	 * <i>native declaration : line 192</i><br>
	 * @deprecated use the safer methods {@link #DecoderGetCurrentTime(com.sun.jna.Pointer, java.nio.LongBuffer)} and {@link #DecoderGetCurrentTime(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int DecoderGetCurrentTime(Pointer PDecoder, LongByReference PDecoderCurrentTime);
	/**
	 * Original signature : <code>int DecoderGetCurrentTime(void*, UINT64*)</code><br>
	 * <i>native declaration : line 192</i>
	 */
	int DecoderGetCurrentTime(Pointer PDecoder, LongBuffer PDecoderCurrentTime);
	/**
	 * Original signature : <code>int DecoderSetCurrentTime(void*, UINT64)</code><br>
	 * <i>native declaration : line 193</i>
	 */
	int DecoderSetCurrentTime(Pointer PDecoder, ULONGLONG DecoderCurrentTime);
	/**
	 * Original signature : <code>int DecoderSetParametrs(void*, unsigned short, DWORD, float[6])</code><br>
	 * <i>native declaration : line 194</i><br>
	 * @deprecated use the safer methods {@link #DecoderSetParametrs(com.sun.jna.Pointer, short, int, java.nio.FloatBuffer)} and {@link #DecoderSetParametrs(com.sun.jna.Pointer, short, int, com.sun.jna.ptr.FloatByReference)} instead
	 */
	@Deprecated 
	int DecoderSetParametrs(Pointer PDecoder, short AveragingFactor0, int SpeedMeasurementPeriod0, FloatByReference Popravka0);
	/**
	 * Original signature : <code>int DecoderSetParametrs(void*, unsigned short, DWORD, float[6])</code><br>
	 * <i>native declaration : line 194</i>
	 */
	int DecoderSetParametrs(Pointer PDecoder, short AveragingFactor0, int SpeedMeasurementPeriod0, FloatBuffer Popravka0);
	/**
	 * Original signature : <code>int DecoderReadTranducerParametrs(void*, _SK*, char*)</code><br>
	 * <i>native declaration : line 196</i><br>
	 * @deprecated use the safer methods {@link #DecoderReadTranducerParametrs(com.sun.jna.Pointer, test._SK, java.nio.ByteBuffer)} and {@link #DecoderReadTranducerParametrs(com.sun.jna.Pointer, test._SK, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int DecoderReadTranducerParametrs(Pointer PDecoder, SK PTranducerParametrs, Pointer StrokaDatchikID);
	/**
	 * Original signature : <code>int DecoderReadTranducerParametrs(void*, _SK*, char*)</code><br>
	 * <i>native declaration : line 196</i>
	 */
	int DecoderReadTranducerParametrs(Pointer PDecoder, SK PTranducerParametrs, ByteBuffer StrokaDatchikID);
	/**
	 * Original signature : <code>int DecoderGetMessage(void*, char*, DWORD*)</code><br>
	 * <i>native declaration : line 197</i><br>
	 * @deprecated use the safer methods {@link #DecoderGetMessage(com.sun.jna.Pointer, java.nio.ByteBuffer, java.nio.IntBuffer)} and {@link #DecoderGetMessage(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int DecoderGetMessage(Pointer PDecoder, Pointer PBuffer, IntByReference PrealSize);
	/**
	 * Original signature : <code>int DecoderGetMessage(void*, char*, DWORD*)</code><br>
	 * <i>native declaration : line 197</i>
	 */
	int DecoderGetMessage(Pointer PDecoder, ByteBuffer PBuffer, IntBuffer PrealSize);
	/**
	 * Original signature : <code>int DecoderReadBase(void*, char*, DWORD*)</code><br>
	 * <i>native declaration : line 198</i><br>
	 * @deprecated use the safer methods {@link #DecoderReadBase(com.sun.jna.Pointer, java.nio.ByteBuffer, java.nio.IntBuffer)} and {@link #DecoderReadBase(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int DecoderReadBase(Pointer PDecoder, Pointer OtvetServera, IntByReference PBytesRead);
	/**
	 * Original signature : <code>int DecoderReadBase(void*, char*, DWORD*)</code><br>
	 * <i>native declaration : line 198</i>
	 */
	int DecoderReadBase(Pointer PDecoder, ByteBuffer OtvetServera, IntBuffer PBytesRead);
	/**
	 * Original signature : <code>int DecoderReadSpeed(void*, char*, DWORD*)</code><br>
	 * <i>native declaration : line 199</i><br>
	 * @deprecated use the safer methods {@link #DecoderReadSpeed(com.sun.jna.Pointer, java.nio.ByteBuffer, java.nio.IntBuffer)} and {@link #DecoderReadSpeed(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int DecoderReadSpeed(Pointer PDecoder, Pointer OtvetServera, IntByReference PBytesRead);
	/**
	 * Original signature : <code>int DecoderReadSpeed(void*, char*, DWORD*)</code><br>
	 * <i>native declaration : line 199</i>
	 */
	int DecoderReadSpeed(Pointer PDecoder, ByteBuffer OtvetServera, IntBuffer PBytesRead);
	/**
	 * Original signature : <code>int DecoderReadTemperature(void*, char*, DWORD*)</code><br>
	 * <i>native declaration : line 200</i><br>
	 * @deprecated use the safer methods {@link #DecoderReadTemperature(com.sun.jna.Pointer, java.nio.ByteBuffer, java.nio.IntBuffer)} and {@link #DecoderReadTemperature(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int DecoderReadTemperature(Pointer PDecoder, Pointer OtvetServera, IntByReference PBytesRead);
	/**
	 * Original signature : <code>int DecoderReadTemperature(void*, char*, DWORD*)</code><br>
	 * <i>native declaration : line 200</i>
	 */
	int DecoderReadTemperature(Pointer PDecoder, ByteBuffer OtvetServera, IntBuffer PBytesRead);
	/**
	 * Original signature : <code>int DecoderReadComplex(void*, char*, DWORD*)</code><br>
	 * <i>native declaration : line 201</i><br>
	 * @deprecated use the safer methods {@link #DecoderReadComplex(com.sun.jna.Pointer, java.nio.ByteBuffer, java.nio.IntBuffer)} and {@link #DecoderReadComplex(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int DecoderReadComplex(Pointer PDecoder, Pointer OtvetServera, IntByReference PBytesRead);
	/**
	 * Original signature : <code>int DecoderReadComplex(void*, char*, DWORD*)</code><br>
	 * <i>native declaration : line 201</i>
	 */
	int DecoderReadComplex(Pointer PDecoder, ByteBuffer OtvetServera, IntBuffer PBytesRead);
	public static class LPCSTR extends PointerType {
		public LPCSTR(Pointer address) {
			super(address);
		}
		public LPCSTR() {
			super();
		}
	};
	public static class HMODULE extends PointerType {
		public HMODULE(Pointer address) {
			super(address);
		}
		public HMODULE() {
			super();
		}
	};
}
